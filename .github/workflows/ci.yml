name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php: [8.1, 8.2, 8.3]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: pdo, pdo_sqlite, json, mbstring
        coverage: xdebug
    
    - name: Validate composer.json
      run: composer validate --strict
    
    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress
    
    - name: Create database directory
      run: mkdir -p database
    
    - name: Setup database
      run: composer run setup
    
    - name: Run tests
      run: composer run test
    
    - name: Run tests with coverage
      run: composer run test:coverage
      env:
        APP_ENV: testing
        DB_DATABASE: database/banco-teste.sqlite
        CACHE_ENABLED: false
        LOG_LEVEL: debug
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  analyze:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: pdo, pdo_sqlite, json, mbstring
    
    - name: Cache Composer packages
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress
    
    - name: Run PHPStan
      run: composer run analyze
    
    - name: Run CodeSniffer
      run: composer run cs

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: pdo, pdo_sqlite, json, mbstring
    
    - name: Cache Composer packages
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress
    
    - name: Run security audit
      run: composer audit

  build:
    needs: [test, analyze, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: pdo, pdo_sqlite, json, mbstring
    
    - name: Cache Composer packages
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-dev --optimize-autoloader
    
    - name: Create build artifact
      run: |
        mkdir -p build
        cp -r src build/
        cp -r public build/
        cp -r config build/
        cp -r database build/
        cp composer.json build/
        cp composer.lock build/
        cp .env.example build/
        cp README.md build/
        cp CHANGELOG.md build/
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ github.sha }}
        path: build/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: build-${{ github.sha }}
        path: build/
    
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Add your deployment commands here
        # Example: rsync, scp, or cloud deployment 